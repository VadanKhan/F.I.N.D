# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: 0215-d:5000/yasa_python
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  key: "eolt_root_cause_analyser_${CI_JOB_NAME}"
  paths:
    - .cache/pip
    - .venv

stages: # List of stages for jobs, and their order of execution
  - test
  - pages
  - deploy

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

.install-deps-template: &install-deps
  before_script:
    - poetry config virtualenvs.in-project true
    - poetry config repositories.yasa http://10.1.255.13:3141/root/dev
    - poetry config http-basic.yasa root yasa

unit-test-job: # This job runs in the test stage.
  stage: test # It only starts when the job in the build stage completes successfully.
  <<: *install-deps
  script:
    - nox --version
    - nox -r

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  <<: *install-deps
  script:
    - echo "Deploying application..."
    - poetry build
    - poetry publish -r yasa
    - echo "Application successfully deployed."
  rules:
    - if: $CI_COMMIT_TAG != null

pages: #this job runs on puses to the main branch
  stage: pages
  <<: *install-deps
  script:
    - nox -rs docs
    - echo "Documentation successfully built."
  artifacts:
    paths:
      - public
  only:
    - main

